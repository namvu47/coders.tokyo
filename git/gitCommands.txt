//github, gitlab, bitbucket
// https://www.atlassian.com/git/tutorials
// http://rogerdudler.github.io/git-guide/

git init
git status

git add <filename>
git commit -m 'description'

git show (commit ID)
git log
git diff


working dir: file modified, not yet add
staging area: file added, waiting for git commit
git repo: saved commited file

git checkout -- filename: discard changes in working dir
git reset HEAD filename: unstage

// git checkout -b feature/dog-class (branching)
// git checkout <branch name>
// git merge
A <--- B
git checkout A
git merge B
// git branch -D <branch name> // delete branch


get reset --soft <commit> // --> staging area
get reset --mixed <commit> // --> working dir
git reset --hard <commit>

git revert <commit>

.gitignore

git push
git config --global credential.helper "cache --timeout=18000"

git clone
git pull // pull repo changes

// Teamwork:
1. git checkout -b <feature/branch>
2. git push origin <branch>
3. create a pull request on Github
4. review code
  4.1. review code online
  4.2. fetch branch into local to test offline (optional)
  4.3. approve pull request
5. merge to master

// Resolve conflicts:
When will conflicts happen?
  1. Change same file + same line
  2. modify a deleted file

Method 1: 
  1. using 'git rebase'
  2. resolve conflicts
  3. push again wit -f (do not -f to master or branch that many people working on)
  
Method 2: 
  1. Merge update master to feature branch (3-way merge)
  2. Resolve conflict
  3. Commit and push
  git checkout master // switch branch
  git pull 
  git checkout feature/mouse-run
  git merge master --> open file, fix file resolve conflict
  
